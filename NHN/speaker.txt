# 수업순서, 의식의 흐름대로 메모.



## 객체생성
1. 리터럴...이게 리터럴,,,,,,,,
 var obj={}; //var obj = new object();

..대체로 오브젝트 만드는법, 접근방법



## 객체 리터럴
:: 제이슨 함수 못넣음.
:: 바이슨?인가 함수넣을수있는게 잇음

// 유효한 식별자가 아닌 경우 항상 [] 을 사용
obj.1st // error 
:: 프로퍼티 첫문자는 숫자가 안된다. 하지만 기어코 쓰겠다면
obj['1st'] = 'first';

var obj2 = {
  name: 'Tom'
}

::name => 이게 프로퍼티였구나.....

delete obj2.name; //정상적으로 지워지면 true 리턴 오류나면 false를 반환



## 프로퍼티의 속성
Object.defineProperty(obj, 'name', {
  value: 'ppap', // 값
  configurable: true, // 삭제, 속성 변경. 이게 false면 다시는 수정모태..생략되면 false
  writable: true, // 값 변경
  enumarable: true // for-in 루프에서 해당 프로퍼티를 반환
}); // 옵션의 속성을 생략하면 디폴트로 false.

## Object.defineProperty() - 사용예(속성) :LIVE:

::이거때문에 뷰가 어쩌구 햇는데 뭐라그랫지



## this

:: 여담 ㅋㅋㅋㅋㅋ자바스크립트를 10일만에...만들엇다고..........OMG

this는 실행되기 전에 결정된다.
글로벌 컨텍스트에서 this를 사용하는 경우는 거의 없다. ( 안쓴다 !! 쓰지마라 차라리 window를 써..)
:: 글로벌 컨텍스트 =>어떤 함수에도 속하지 않은 함수 밖의 공간, 모든 함수를 감싼게 실행된거?뭐래




## 메서드안에서의 this(1) 우리가 아는 그것

메서드: 실행될때 객체와 연결되서 실행되는 함수

::this는 실행되기전에 정의된다. 한 5번 이야기함
:: 실행될때마다 실행직전에....라는 말인듯. 




## 메서드안에서의 this(2)

nottodo.getTitle();
:: this =>nottodo



## 함수안에서의 this

this = window

var getTitle = todo.getTitle;
getTitle(); == window.getTitle(); //strict모드에서는 undifined


## 이벤트 리스너 안에서의 this

element.addEventListener('click', function() {
  this === element; //this는 element변수가 참조하는 엘리먼트 객체
}, false);

::맨앞 element가 this.

::::누가 질문햇는데 질문을 이해하지 못하겠똬
::::뷰 기준으로 데이타에서 게터나 특정 함수가 실행되기전에 지금 무슨함수가 실행되고 있는지
글로벌에 넣어놓고( 그게 랜더일수도있음 템플릿쓸떄) 게터가 실행돠면 와쳐라는 모듈이
뭐든 쓰이게 되면 게터가 실행이 되고 와쳐한테 게터가 알려줌 지금실행되는함수 나한테 관심잇다고 저장해놔알려주고
실행한다면 유저가 뭔가 바꿔서 해당데이터가 바뀌면 세터가 실행되면서 와쳐한테말함
그 아까 내가말한 목록그거 다시실행시켜 나바뀌엇쪙 뀨
::::리액트는 완전 다름 
::::데이터는 안바뀌어두댐 근데 유저가 데이터에 새로운 참조를 보냄
컴포넌트를 새로그려버림 변경점 생기면 위에서부터 싹다 참조가 바뀌엇는지 비교해서 바뀌엇으면 다시 그림
데이터가 바뀌엇다면 참조가 바뀐것
::::앵귤러는 뷰에 가깝.....근데 강사님이 별로 안좋아함
